0B00 0000 ; Endereço de retorno
0B02 0B10 ; Jump para o começo
0B04 0000 ; Parâmetro: endereço inicial
0B06 0005 ; Parâmetro: tamanho da imagem de memória
0B08 0000 ; Reservado para o tamanho do bloco atual
;
0B0A 0000 ; Iterador das instruções em um bloco
0B0C 0000 ; Checksum
0B0E 0000 ; Reservado para o byte lido


; Endereço inicial do bloco
0B10 D300 ; Pega o byte de endereço inicial

0B12 4B0C
0B14 9B0C ; Checksum += instrução

; Qtde de instruções do bloco atual
0B16 D300 ; Byte de tamanho do bloco
0B18 9B08 ; Guarda no tamanho atual do bloco
0B1A 4B0C
0B1C 9B0C ; Checksum += instrução

; Instruções
0B1E 8B0A ; Carrega iterador
0B20 5B08 ; Tira o tamanho do bloco
0B22 2B26 ; Se ainda faltam instruções, continuar
0B24 1B40 ; Se instruções acabaram, checar soma

0B26 8B0A ; Pega iterador de novo
0B28 600C ; Multiplica por 2
0B2A 4010 ; Soma com o endereço atual da memória
0B2C 400E ; Soma MM
0B2E 9B32 ; Põe a instrução logo abaixo
0B30 D300 ; Pega a instrução
;
0B32 0000 ; Espaço pra instrução feita acima
0B34 4B0C
0B36 9B0C ; Atualiza checksum
;
0B38 8B0A ; Recupera iterador
0B3A 400A ; Iterador + 1
0B3C 9B0A ; It += 1
;
0B3E 0B1E ; Completa o loop

; Checksum
0B40 D300 ; Pega o byte do checksum
0B42 5B0C ; Tira o checksum calculado
0B44 1B48 ; Deu bom
0B46 0B5C ; Deu ruim
;
0B48 8B0A ; Pega o valor atual do iterador
0B4A 600C ; Multiplica por 2
0B4C 4010 ; Soma com o endereço inicial
0B4E 9010 ; Põe no endereço inicial
;
0B50 3000
0B52 9B0A ; Reinicializa o iterador
0B54 9B0C ; E o checksum também
;
0B56 8B06 ; Pega o tamanho estipulado de um bloco
0B58 5B08 ; Tira o tamanho do bloco atual
0B5A 1B10 ; Se for o tamanho correto, faz mais um loop
;
0B5C BB00 ; Fim
